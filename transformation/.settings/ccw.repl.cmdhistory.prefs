cmdhistory=["(mapv * [1 2 3] [4 5 6])" "(mapv * [1 2 3] [4 x y])" "str" "str \\"balls\\"" "\\"balls\\"" "str 1" "str 1 + 2" "+ 2 str 1" "+ 2 (str 1)" "def" "def *strings* [\\"hell\\" \\"im\\"]" "lookup" "ball" "get" "lookup" "transform" "lookup" "(lookup '{a 1 b 2} 'b)" "(lookup '{a 1 b 2}' a)" "a-list" "lookup" "alist" "(lookup alist b)" "(lookup alist 'b)" "clojure SUCKS IT FUCKIN SUCKS" "baaaaab" "a;skdjfalskdjf;a;lskdjf;alksdjf;alksdjfjdjj" "fffffff" "(lookup alist '1)" "alist" "(lookup alist 'd)" "alist" "(lookup alist 'a)" "(lookup alist 'b)" "(lookup alist 'c)" "(lookup alist 'd)" "(lookup alist '7)" "(fn [] \\"hi\\")" "((fn [] \\"hi\\"))" "(lookup alist '1)" "(lookup alist 1)" "(transform [[2 0] [0 1]] [(+ x 5) y])" "(transform [[2 0] [0 1]] [(+ 3 5) 7])" "(transform '[[2 0] [0 1]] [(+ 3 5) 7])" "(transform '[[2 0] [0 1]] '[1 7])" "mb" "(transform ma mb)" "(transform '[2 4 2] '[2 3 3])" "(transform [2 4 2] [2 3 3])" "(transform za zb)" "(transform [[2 2 2] [2 2 2]] [[3 3 3] [3 3 3]])" "(transform [[2 x 2] [x 2 2]] [[1 y 3] [1 0 1]])" "(transform [[2 2] [2 2]] [0 1])" "(transform [[2 2 2] [2 2 2]] [[4 4] [4 4]])" "(transform [[1 0] [0 1]] [3 4])" "(transform [[1 0] [0 1]] [[3 4]])" "(transform [[1 0] [0 1]] [[3 4] [0 0]])" "(transform [[2 0] [0 1]] [[(+ 2 5) 7]])" "(transform [[2 0] [0 1]] [[(+ 3 5) 7]])" "(transform [[1 0] [0 1]] [[(+ 3 5) 7]])" "transform" "ball" "fucker" "transform" "\\"a string\\"" "a string" "'a string" "'a" "'string" "'a 'string" "'a_string" "meme" "ball'" "'\\n \\nb" "'\\n fref" "[\\"a\\" \\"vector\\" \\"of\\" \\"strings\\"]" "\\"a\\" \\"vector\\"" "\\"a string\!\\"" "(a string)" "(\\"a string\\")" "str" "str \\"hey\\"" "str \\"hey\\" \\"it's\\" \\"me\\"" "(str \\"hey \\" \\"it's \\" \\"me\\")" "form" "(str 1 2 3)" "(str meme)" "(str \\"meme\\" \\"hello\\")" "(+ 123)" "(+ 1 2 3)" "(if true\\n  \\"is true\\"\\n  \\"is false\\")" "(if true\\n  \\"is tru\\"\\n  0)" "(if true\\n  \\"is tru\\"\\n  0 nil)" "(if false\\n  \\"memer\\"\\n  )" "(if false\\n  \\n  \\"chilin)" "(if false\\n  \\n  \\"chillin\\")" "(if false\\n  \\"bam\\"\\n  \\"boom\\")" "(println hell)" "(println \\"hell\\")" "(if true\\n  (do (println \\"sussess\\")\\n    \\"boy\\")\\n  (do (println \\"fug\\")\\n    \\"aaa\\"))" "(do (println \\"hey\\"))" "(when true\\n  (println \\"a big boy?\\")\\n  \\"a big big big boy\\"\\n  \\"a small boy\\")" "(when false\\n  (println 1)\\n  \\"nope\\")" "(when true 1)" "(when\\n  true\\n  1)" "(when\\n  true\\n  1\\n  )" "(\\n  w\\n  h\\n  e\\n  n\\n  t\\n  r\\n  u\\n  e\\n  1\\n  )" "(\\n  when\\n  true\\n  1\\n  )" "(true? 2)" "(true? true)" "(false? 2)" "(23? 23)" "(2?)" "(\\"string\\"? \\"string\\")" "(false? false)" "(\= \\"string\\" \\"string\\")" "(\= \\"string\\" \\"strong\\")" "(\= true true)" "(\= true 1)" "(if nil\\n  \\"not the result because nil is falsey\\"\\n  \\"nil is falsey\\"\\n  )" "\:big_balls" "big_balls" "\:nigger" "slfad" "sdfjl" "\:ksdaf" "(if \:chndle\\n  2\\n  3)" "(or \\"big\\" \\"balls\\" \\"on\\" \\"my\\" \\"face\\" nil \\"lol\\")" "(or nil nil nil nil nil \\"meme\\" nil)" "(or nil)" "(or false true)" "(and \\"big\\" \\"balls\\" nil \\"haha\\")" "(and \\"big ol man\\" \\"chindle\\")" "(def billy\\n  \\"billy\\")" "billy" "(defn error-message\\n  [severity]\\n  (str \\"oh no we're \\"\\n       (if (\= severity \:mild)\\n         \\"fucked\\"\\n         \\"going to hell\\"\\n         )\\n       )\\n  )" "(error-message \:mild)" "(error-message 1)" "(def name \\"chewbacca\\")" "name" "undo" "name" "nam" "(def nem \\"chewbacca\\")" "nem" "(str nem \\"\: uglglglgllg\\")" "\\"\\\\\\"bigguboisu\\"\\\\\\"" "\\"\\\\\\"bigguboisu\\\\\\"\\"" "{a 1 b 2}" "'{a 1 b 2}" "{}" "{4}" "{4 2}" "{12 3234}" "{23 234 234 11}" "{234 a 23 3}" "{\:first-name \\"Charlie\\"\\n \:last-name \\"McFishwich\\"}" "{\\"string-key\\" +}" "(\\"string-key\\" 2 4)" "(+ 2 4)" "(str 2 3)" "(str \\"poonslayer\\" 7)" "\:name" "\:name \\"billy\\"" "{\:name \\"billy\\"}" "\:name" "{\:name {\:first \\"John\\" \:middle \\"Jacob\\" \:last \\"jinglesldfk\\"}}" "(hash-map \\"big\\" \\"balls\\")" "def funny (hash-map \\"big\\" \\"balls\\")" "(def funny (hash-map \\"big\\" \\"Balls\\"))" "funny" "(get funny)" "(get funny \\"big\\")" "(get funny 1)" "(get funny 1 2)" "(get 2)" "(get 2 2)" "(get funny \\"big\\" \\"beans?\\")" "(get funny \\"nope\\" \\"bean?\\")" "(def test {\:a 0 \:b {\:c \\"ho hum\\"}})" "test" "(println test)" "(def a-map {\:a 0 \:b {\:c \\"ho hum\\"}})" "get-in" "(get-in a-map [\:b \:c])" "(get-in a-map \:b)" "(get a-map \:b)" "ess ma" "a-map" "(a-map)" "(a-map \:b)" "a-map" "(a-map \:a)" "({\:name \\"chunston\\"} \:name)" "(a\:)" "(a\: a-map)" "(\:a a-map)" "(\:b a-map)" "([\:b \:c] a-map)" "(\:d a-map)" "(\:d a-map \\"not here nigga\\")" "(get [2 3 2 1 3 5 52 3] 3)" "(first [2 3 4 2 3 3])" "(second [2 3 4 1 2 3])" "(third [2 3 45 5])" "(nth [2 3 552 11 4 6 7] 4)" "nth" "(nth 4 [2 3 2 1 1 1]\\n     )" "(conj [1 2 3] [4 5 6])" "(conj)" "cong" "conj" "(conj [1 2 3] 4 5)" "(conj [1 2 3] 4 5 6 7 8 9 10)" "(conj [1 2] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3)" "(conj [1 2] 3 3 3 3 3 3 3 3 3 3 3)" "(vector \\"big\\" \\"ass\\" \\"balls\\")" "(vector 1 2 3)" "'(vector 1 2 3)" "(list 1 \\"two\\" {3 4})" "[1 \\"two\\" {3 4}]" "(get [1 \\"two\\" {3 4} 2] 1)" "\#{\\"big\\" \\"ol\\" 1234 \\"balls nigga\\"}" "\#{\\n  ffuck}" "\#{\\"fuck\\" \\"fuck\\"}" "{meme 1 meme 2}" "{\\"meme\\" 1 \\"meme\\" 2}" "{1 \\"meme\\" 2 \\"meme\\"}" "(hash-set \\"fuck\\" \\"fuck\\")" "bind-values" "simplify" "bind-values" "(def a-vector [1 2])" "(first a-vector)" "(second a-vector)" "(get a-vector 0)" "(def nested-vec [[1 2] [3 4]])" "(first first nested-vec)" "(first nested vec)" "(first nested-vec)" "(first first nested-vec)" "(get nested-vec 0 0)" "(first (first nested-vec))" "transform" "sjk" "(transform [[1 2] [3 4]] [5 6])" "transform" "(transform [[1 2] [3 4]] [5 6])" "first" "(def nested-vec [[1 2] [3 4]])" "nested-vec" "(println nested-vec)" "nested-vec" "(first (first nested-vec))" "(first nested-vec)" "(second (first nested-vec))" "(+ (first (first nested-vec) second (first nested-vec)))" "(+ (first (first nested-vec)) (second (first nested-vec)))" "(transform [[1 2] [3 4]] [5 6])" "(transform [[x 2] [3 4]] [5 6])" "(transform [[1 2] [3 4]] [5 6])" "(simplify '(* 1 x))" "(simplify '(* x 1))" "(simplify '(* x 0))" "(simplify '(* 1 z))" "quote((*)\\n      )" "'*" "(quote(*))" "(quote(+) \\n      \\n      \\n      \\n    )" "(quote ( )\\n       )" "(first (second [[a b] [c d]]))" "(first (second [[1 2] [3 4]]))" "(second [[1 2] [3 4]])" "(nth [1 2 3 4 5] 3)" "(nth (nth [[1 2] [3 4] [5 6] [7 8]] 1) 1)" "(nth [1 2 3 4 5] 0)" "(transform [[1 2] [3 4]] [5 6])" "(transform [[1 2] [x 2]] [3 y])" "(rest \\n  '(a b c(d e f(g))))" "transform" "(transform [[1 2] [3 4]] [5 6])" "(transform '[[a b] [c d]] '[e f])" "(transform [[a b] [c d]] [e f])" "(transform [[1 2] [3 4]] [5 6])" "(int \\\\A)" "\\\\A" "(int \\\\a)" "(int \\\\A)" "(int \\\\z)" "(map 2 1)" "(map a 2)" "(map 2 1)" "{2 1}" "{2 1 2 4 5 6}" "simplify" "(simplify (* 1 z))" "(simplify '(* 1 z))" "(simplify '(* 1 char))" "(simplify (* 1 z))" "(simplify (* 1 z) z)" "(simplify '(* 1 z) 'z)" "(def a-list '(- (- x)))" "a-list" "(first(a-list))" "(- (- x))" "'(- (- x))" "(first ('(- (- x))))" "(list '(- (- x)))" "(first (list ('(- (- x)))))" "(first '(2 3 5))" "(first '(- x(\=)))" "(first '(- x))" "(first '(- (- x)))" "(second '(- (- x)))" "(first (second '(- (- x))))" "(second (second '(- ( - x))))" "simplify" "(simplify '(* 1 z))" "(simplify '(* 1 x))" "(simplify (* 1 x))" "(simplify '(* 1 z))" "(first '(* 1 z))" "(simplify '(+ 0 z))" "(simplify '(* 1 z))" "(simplify '(exp))" "(simplify ('(* 1 z)))" "(simplify '(* 1 z))" "(simplify ('(* 1 z))\\n          )" "(simplify ('(* 1 z)))" "(simplify '(* 1 z))" "(simplify ('(* 1 z))\\n          )" "(def exp '(* 1 z))" "exp" "(first(exp))" "(first '(exp))" "(first ('exp))" "(first ((exp)))" "(first (exp))" "(first '(* 1 z))" "(first (list(exp)))" "(list (exp))" "(exp)" "exp" "(simplify (exp))" "exp" "(first '((exp)))" "(first (exp))" "'(first (exp))" "exp" "(first (exp))" "(first '(* 1 z))" "(list '(* 1 z))" "(list (* 1 z))" "(first (list '(* 1 z)))" "(list ' * 1 z)" "exp" "(first (exp))" "(first (* 1 z))" "exp" "(first '(* 1 z))" "(first (exp))" "(first exp)" "(second exp)" "(third exp)" "(fourth exp)" "fourth" "third" "first" "second" "(first exp)" "(simplify exp)" "(first exp)" "(second exp)" "(simplify (exp))" "(simplify exp)" "(simplify '(* 1 y))" "(simplify '(* y 1))" "(simplify exp)" "(simplify '(* 1 y))" "(simplify exp)" "(simplify '(* 1 a))" "(simplify '(* 1 b))" "(simplify '(* 1 c))" "(simplify '(* d 1))" "(simplify '(* e 1))" "(simplify '(* 0 h))" "(simplify '(* 0 r))" "(simplify '(* m 0))" "(simplify '(+ 0 n))" "(simplify '(+ 0 q))" "(simplify '(+ p 0))" "(simplify '(- (- x)))" "'(- (- x))" "(first (first '(- (- x))))" "(first first '(- (- x)))" "(first (first '(- (- x))))" "'(- '(- x))" "(first '(- (- x)))" "(first (first '(- (- x))))" "(first (second '(- (- x))))" "(simplify (- (- x)))" "(simplify '(- (- x)))" "(simplify '(- (- z)))" "transform" "(transform [[1 0] [0 1]] [x y])" "[x y]" "'[x y]" "(quote [x y])" "(def mat [x y])" "(def mat (quote [x y]))" "mat" "(if (\= first [x y] x)\\n  \\"nope\\")" "defmacro" "`\\n x" "`x" "`y" "`huh" "huh" "~huh" "~y" "(transform [[1 0] [0 1]] [x y])" "(transform [[1 0] [0 1]] '[x y])" "(transform '[[1 0] [0 1]] '[x y])" "(transform [[1 0] [0 1]] '[x y])" "(transform [[1 0] [0 1]] [x y])" "(transform [[1 0] [0 1]] '[x y])" "(simplify '(* 1 b))" "(simplify '(* 2 b))" "(if true\\n  '(* 1 x)\\n  '(* 2 x)\\n  )" "(if false\\n  '(* 1 x)\\n  '(* 2 x)\\n  )" "(simplify (* 2 x))" "(simplify '(* 2 x))" "(simplify '(* x 2))" "(simplify '(+ 2 x))" "(simplify '(+ y 2))" "(simplify (- (- b)))" "(simplify '(- (- b)))" "(simplify '(- (b)))" "(simplify '(- (a)))" "(simplify '(- (- t)))" "(simplify '(- (t)))" "(simplify '(- (- t)))" "(transform [[1 0] [0 1]] '[x y])" "(transform [[2 0] [0 1]] [x y])" "(transform [[2 0] [0 1]] '[x y])" "(transform [[2 0] [0 1]] '[2 y])" "(simplify (* 2 x))" "(simplify '(* 2 x))" "(simplify '(* x 1\\n              ))" "(simplify '(* x 2\\n              )\\n          \\n\\n          \\n          )" "(simplify '(+ 2 z))" "(simplify '(+ 2 2))" "(simplify '(* 2 5))" "(simplify '(- (- b)))" "(simplify '(- (r)))" "(simplify '(* 5 2))" "(transform [[2 0] [0 1]] '[x\\n                           y])" "(transform [[2 0] [0 1]] '[2 y])" "(transform [[z 0] [0 1]] '[2 y])" "(transform '\\n            [[z 0] [0 1]] '[2 y])" "(transform '[[2 0] [0 1]] '[(+ x 5) y])" "[\\n (transform '[[2 0] [0 1]] '[(+ x 5) y])]" "[transform '[[2 0] [0 1]] '[(+ x 5) y]]" "(transform [[0 0] [1 1]]\\n           (transform [[2 0] [0 2]]\\n                      (transform [[-1 0] [0 -1]] '[x 2])))" "(first '(-1 2))" "(simplify '(* -1 x))" "(transform [[0 0] [1 1]] \\n           (transform [[2 0] [0 2]] \\n             (transform [[-1 0] [0 -1]] '[x 2])))" "(simplify '(x (x+1) 2))" "(simplify '(x ( + x 1) 2))" "(simplify '(+ (* x 2) 0))" "simplify" "(transform [[0 0] [1 1]] \\r\\n  (transform [[2 0] [0 2]] \\r\\n    (transform [[-1 0] [0 -1]] [x 2])))" "(transform [[0 0] [1 1]] \\r\\n  (transform [[2 0] [0 2]] \\r\\n    (transform [[-1 0] [0 -1]] '\\n                                [x 2])))" "(transform [[0 0] [1 1]] \\r\\n  (transform [[2 0] [0 2]] \\r\\n    (transform [[-1 0] [0 -1]] [x 2])))" "(transform [[0 0] [1 1]] \\r\\n  (transform [[2 0] [0 2]] \\r\\n    (transform [[-1 0] [0 -1]] '[x 2])))" "simplify" "(simplify '(* 2 z))" "(simplify '(* z 2))" "(simplify '(+ 2 a))" "(simplify '(+ r 2))" "(transform [[0 0] [1 1]] \\r\\n  (transform [[2 0] [0 2]] \\r\\n    (transform [[-1 0] [0 -1]] '[x 2])))" "(def p1 '(transform [[a 3] [0 0]] [x y]))" "p1" "(evalexp p1 '{a 5, y 2})" "(transform [[5 3] [0 0]] [x 2])" "(transform [[5 3] [0 0]] '\\n                          [x 2])" "bind-values" "(bind-values {a 5, y 2} p1)" "(bind-values '{a 5, y 2} p1)" "simplify" "p1" "(evalexp p1 '{a 5, y 2})" "p1" "simplify" "evalexp" "p1" "(evalexp p1 '{a 5, y 2})" "(def p3 '(transform [[0 0] [1 1]] \\r\\n           (transform [[2 0] [0 2]] \\r\\n             (transform [[-1 0] [0 -1]] [x 2]))))" "{}" "(evalexp p3 {})" "(evalexp p3 '{x 2})" "(transform [[0 0] [1 1]] \\r\\n  (transform [[2 0] [0 2]] \\r\\n    (transform [[-1 0] [0 -1]] [x 2])))" "(transform [[0 0] [1 1]] \\r\\n  (transform [[2 0] [0 2]] \\r\\n    (transform [[-1 0] [0 -1]] '[x 2])))" "p3" "(first p3\\n       )" "(second p3)" "(third p3)" "p3" "(def p3 '(transform [[0 0] [1 1]] \\r\\n           (transform [[2 0] [0 2]] \\r\\n             (transform [[-1 0] [0 -1]] [x 2]))))" "(evalexp p3 '{x 4})" "p3" "(third p3)" "(first (third p3))" "p1" "(evalexp p1 '{a 5, y 2})" "transform" "simplify" "transform" "simplify" "bind-values" "transform" "(transform [[1 2] [3 4]] [5 5])" "transform" "trampoline" "transform" "(transform [[1 2] [3 4]] [5 6])" "p1" "\\t\\r\\n(evalexp p1 '{a 5, y 2})" "(def p1 '(transform [[a 3] [0 0]] [x y]))" "(evalexp p1 '{a 5, y 2})" "(def p1 '(transform [[a 3] [0 0]] [x y]))" "(evalexp p1 '{a 5, y 2})" "(def p3 '(transform [[0 0] [1 1]] \\r\\n           (transform [[2 0] [0 2]] \\r\\n             (transform [[-1 0] [0 -1]] [x 2]))))" "(evalexp p3 {})" "(evalexp p1 '{a 5, y 2})" "(def p3 '(transform [[0 0] [1 1]] \\r\\n           (transform [[2 0] [0 2]] \\r\\n             (transform [[-1 0] [0 -1]] [x 2]))))" "(evalexp p3 {})" "simplify" "(def p3 '(transform [[0 0] [1 1]] \\r\\n           (transform [[2 0] [0 2]] \\r\\n             (transform [[-1 0] [0 -1]] [x 2]))))" "(evalexp p3 {})" "(def p1 '(transform [[a 3] [0 0]] [x y]))" "(evalexp p1 {})" "(evalexp p1 {a 5, y 2})" "(evalexp p1 '{a 5, y 2})" "(evalexp p3 {})" "(simplify '(+ (* 5 x) (* 0 x)))" "(simplify '(+ (simplify(* 5 x)) (simplify(* 0 x))))" "(simplify '(+ (simplify '(* 5 x)) (simplify '(* 0 x))))" "(simplify \\n  '(+ \\n     (simplify \\n       '(* 5 x)) \\n     (simplify \\n       '(* 0 x))))" "(simplify '(+ (simplify (* 5 x)) (simplify (* 0 x))))"]
eclipse.preferences.version=1
